name: Build OpenWrt x86_64

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 1,4,7,10 *'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0



      - name: Check current directory and file paths
        echo "当前工作目录是："
        pwd
        echo "根目录文件列表："
        ls -l
        echo "查看 config 目录内容："
        ls -l config
        echo "查看 openwrt 目录内容："
        ls -l openwrt

      - name: Copy feeds.conf.default
        run: |
          if [ -f config/feeds.conf.default ]; then
            cp config/feeds.conf.default openwrt/feeds.conf.default
          else
            echo "No feeds.conf.default found in config/, skipping copy"
          fi

      - name: Update all feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Copy config and scripts
        run: |
          cp config/.config openwrt/.config
          cp config/customize.sh openwrt/
          cp -r scripts/. openwrt/scripts/
          chmod +x openwrt/customize.sh openwrt/scripts/*.sh

      - name: List openwrt/scripts contents
        run: ls -l openwrt/scripts

      - name: Run ext_packages.sh if present (clone OpenWrt-nikki etc.)
        run: |
          cd openwrt
          if [ -f scripts/ext_packages.sh ]; then
            chmod +x scripts/ext_packages.sh
            ./scripts/ext_packages.sh
          else
            echo "❌ ext_packages.sh not found!"
            exit 1
          fi

      - name: Clean customize.sh to remove internal 'cd openwrt'
        run: sed -i '/cd openwrt/d' openwrt/customize.sh

      - name: Run customize.sh
        run: |
          cd openwrt
          chmod +x customize.sh
          ./customize.sh

      - name: Make defconfig and download sources
        run: |
          cd openwrt
          make defconfig
          make download -j8

      - name: Build OpenWrt (x86_64)
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s

      - name: Extract OpenWrt version
        id: getversion
        run: |
          VERSION=$(grep '^VERSION:=' openwrt/include/version.mk | cut -d= -f2 | tr -d ' ')
          PATCHLEVEL=$(grep '^PATCHLEVEL:=' openwrt/include/version.mk | cut -d= -f2 | tr -d ' ')
          FULLVERSION="${VERSION}.${PATCHLEVEL}"
          echo "fullversion=$FULLVERSION" >> $GITHUB_OUTPUT

      - name: Get build time
        id: buildtime
        run: echo "time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release and upload firmware
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.IGH_TOKEN }}
          tag: openwrt-x86_64-${{ github.run_id }}
          name: OpenWrt x86_64 ${{ steps.getversion.outputs.fullversion }}
          body: |
            🎉 OpenWrt x86_64 ${{ steps.getversion.outputs.fullversion }} 
            📅 ${{ steps.buildtime.outputs.time }}
          artifacts: openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz
