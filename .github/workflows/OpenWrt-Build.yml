name: OpenWrt x86_64

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点自动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Restore last built version cache
        id: cache-version
        uses: actions/cache@v3
        with:
          path: last_build_version.txt
          key: last-build-version-cache
          restore-keys: last-build-version-cache

      - name: Get latest OpenWrt stable release tag
        id: get_latest_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/openwrt/openwrt/tags | jq -r '.[].name' | grep '^v[0-9]' | grep -vE 'rc|SNAPSHOT' | sort -Vr | head -n1)
          echo "latest_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Compare versions
        id: compare
        run: |
          LAST_VER=$(cat last_build_version.txt 2>/dev/null || echo "none")
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"

          echo "Last built version: $LAST_VER"
          echo "Latest upstream version: $LATEST_TAG"

          if [ "$LAST_VER" = "$LATEST_TAG" ]; then
            echo "❎ No new version detected. Skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "✅ New version detected. Proceeding."
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Build skipped notice
        if: steps.compare.outputs.should_build == 'false'
        run: echo "🚫 No build performed because there's no new version."

      - name: Free up disk space
        if: steps.compare.outputs.should_build == 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Show available disk space
        if: steps.compare.outputs.should_build == 'true'
        run: df -h

      - name: Install dependencies
        if: steps.compare.outputs.should_build == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3 python3-setuptools python3-distutils-extra \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
            rsync unzip zlib1g-dev file wget python3-pyelftools ccache ash

      - name: Clone OpenWrt source
        if: steps.compare.outputs.should_build == 'true'
        run: |
          git clone --depth=1 --branch "${{ steps.get_latest_tag.outputs.latest_tag }}" https://github.com/openwrt/openwrt.git

      - name: Update and install feeds
        if: steps.compare.outputs.should_build == 'true'
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Prepare openwrt/scripts directory
        if: steps.compare.outputs.should_build == 'true'
        run: mkdir -p openwrt/scripts

      - name: Copy config and scripts
        if: steps.compare.outputs.should_build == 'true'
        run: |
          cp config/.config openwrt/.config
          cp config/customize.sh openwrt/
          cp -r scripts/. openwrt/scripts/
          chmod +x openwrt/customize.sh openwrt/scripts/*.sh

      - name: List openwrt/scripts contents
        if: steps.compare.outputs.should_build == 'true'
        run: ls -l openwrt/scripts

      - name: Run ext_packages.sh if present
        if: steps.compare.outputs.should_build == 'true'
        run: |
          cd openwrt
          if [ -f scripts/ext_packages.sh ]; then
            chmod +x scripts/ext_packages.sh
            ./scripts/ext_packages.sh
          else
            echo "❌ ext_packages.sh not found!"
            exit 1
          fi

      - name: Run customize.sh
        if: steps.compare.outputs.should_build == 'true'
        run: |
          cd openwrt
          chmod +x customize.sh
          ./customize.sh

      - name: Make defconfig and download sources
        if: steps.compare.outputs.should_build == 'true'
        run: |
          cd openwrt
          make defconfig
          make download -j8

      - name: Build OpenWrt x86_64
        if: steps.compare.outputs.should_build == 'true'
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s

      - name: Get build time
        if: steps.compare.outputs.should_build == 'true'
        id: buildtime
        run: echo "time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release and upload firmware
        if: steps.compare.outputs.should_build == 'true'
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.IGH_TOKEN }}
          tag: ${{ steps.get_latest_tag.outputs.latest_tag }}
          name: OpenWrt x86_64 ${{ steps.get_latest_tag.outputs.latest_tag }}
          body: |
            🎉 OpenWrt x86_64 ${{ steps.get_latest_tag.outputs.latest_tag }}
            📅 构建时间：${{ steps.buildtime.outputs.time }}
            🔗 上游源码：https://github.com/openwrt/openwrt/tree/${{ steps.get_latest_tag.outputs.latest_tag }}
          artifacts: openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz
          makeLatest: true
          skipIfReleaseExists: true

      - name: Save latest built version to file
        if: steps.compare.outputs.should_build == 'true'
        run: echo "${{ steps.get_latest_tag.outputs.latest_tag }}" > last_build_version.txt

      - name: Save last built version cache
        if: steps.compare.outputs.should_build == 'true'
        uses: actions/cache@v3
        with:
          path: last_build_version.txt
          key: last-build-version-cache
