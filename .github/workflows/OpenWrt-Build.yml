name: Build OpenWrt x86_64

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点自动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出你的仓库代码（包含 config/ 和 scripts/）
      - uses: actions/checkout@v3

      # 2. 安装 jq
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 3. 恢复上次构建版本缓存
      - name: Restore last built version cache
        id: cache-version
        uses: actions/cache@v3
        with:
          path: last_build_version.txt
          key: last-build-version-cache
          restore-keys: last-build-version-cache

      # 4. 获取最新 OpenWrt stable release tag
      - name: Get latest OpenWrt stable release tag
        id: get_latest_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/openwrt/openwrt/tags | jq -r '.[].name' | grep '^v[0-9]' | grep -vE 'rc|SNAPSHOT' | sort -Vr | head -n1)
          echo "latest_tag=$TAG" >> $GITHUB_OUTPUT

      # 5. 版本对比，判断是否跳过构建
      - name: Compare versions
        id: compare
        run: |
          LAST_VER=$(cat last_build_version.txt 2>/dev/null || echo "none")
          echo "Last built version: $LAST_VER"
          echo "Latest upstream version: ${{ steps.get_latest_tag.outputs.latest_tag }}"
          if [ "$LAST_VER" = "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "No new version detected. Skipping build."
            exit 78
          else
            echo "New version detected. Proceeding."
          fi

      # 6. 克隆 OpenWrt 源码（指定最新标签）
      - name: Clone OpenWrt source
        env:
          LATEST_TAG: ${{ steps.get_latest_tag.outputs.latest_tag }}
        run: |
          git clone --depth=1 --branch "$LATEST_TAG" https://github.com/openwrt/openwrt.git

      # 7. 释放磁盘空间
      - name: Free up disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      # 8. 查看磁盘空间
      - name: Show available disk space
        run: df -h

      # 9. 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3 python3-setuptools python3-distutils-extra \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
            rsync unzip zlib1g-dev file wget python3-pyelftools ccache ash

      # 10. 更新 feeds
      - name: Update all feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 11. 创建 openwrt/scripts 目录，避免复制失败
      - name: Prepare openwrt/scripts directory
        run: mkdir -p openwrt/scripts

      # 12. 复制配置和脚本文件，并赋执行权限
      - name: Copy config and scripts
        run: |
          cp config/.config openwrt/.config
          cp config/customize.sh openwrt/
          cp -r scripts/. openwrt/scripts/
          chmod +x openwrt/customize.sh openwrt/scripts/*.sh

      # 13. 查看复制后的脚本目录内容
      - name: List openwrt/scripts contents
        run: ls -l openwrt/scripts

      # 14. 运行 ext_packages.sh 脚本（如果存在）
      - name: Run ext_packages.sh if present
        run: |
          cd openwrt
          if [ -f scripts/ext_packages.sh ]; then
            chmod +x scripts/ext_packages.sh
            ./scripts/ext_packages.sh
          else
            echo "❌ ext_packages.sh not found!"
            exit 1
          fi

      # 15. 清理 customize.sh 中多余的 cd 命令，避免二次切换目录
      - name: Clean customize.sh to remove internal 'cd openwrt'
        run: sed -i '/cd openwrt/d' openwrt/customize.sh

      # 16. 运行 customize.sh
      - name: Run customize.sh
        run: |
          cd openwrt
          chmod +x customize.sh
          ./customize.sh

      # 17. 生成 defconfig 并下载源码
      - name: Make defconfig and download sources
        run: |
          cd openwrt
          make defconfig
          make download -j8

      # 18. 编译 OpenWrt (x86_64)
      - name: Build OpenWrt (x86_64)
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s

      # 19. 提取 OpenWrt 版本号（使用 make -f）
      - name: Extract OpenWrt version
        id: getversion
        run: |
          cd openwrt
          VERSION=$(make -s -f include/version.mk VAL=VERSION printval)
          PATCHLEVEL=$(make -s -f include/version.mk VAL=PATCHLEVEL printval)
          FULLVERSION="${VERSION}.${PATCHLEVEL}"
          echo "Detected version: $FULLVERSION"
          echo "fullversion=$FULLVERSION" >> $GITHUB_OUTPUT

      # 20. 获取构建时间
      - name: Get build time
        id: buildtime
        run: echo "time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      # 21. 创建 GitHub Release 并上传固件
      - name: Create GitHub Release and upload firmware
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.IGH_TOKEN }}
          tag: openwrt-x86_64-${{ github.run_id }}
          name: OpenWrt x86_64 ${{ steps.getversion.outputs.fullversion }}
          body: |
            🎉 OpenWrt x86_64 ${{ steps.getversion.outputs.fullversion }}
            📅 构建时间：${{ steps.buildtime.outputs.time }}
          artifacts: openwrt/bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img.gz

      # 22. 保存本次构建的版本号到文件
      - name: Save latest built version to file
        run: echo "${{ steps.getversion.outputs.fullversion }}" > last_build_version.txt

      # 23. 缓存最新版本号文件
      - name: Save last built version cache
        uses: actions/cache@v3
        with:
          path: last_build_version.txt
          key: last-build-version-cache-${{ steps.getversion.outputs.fullversion }}
